gateboard_bios_version=20221115

bios_flash_size=80000

blob_load_addr=81000000
itb_load_addr=84000000
dtoverride_load_addr=82000000
initrd_high=84000000



kernel_name=vmlinux.itb
dtoverride_name=dtoverride.dtb
initrd_conf_name=initrd-1
firmware_name=hatlab_gateboard-one-combined.img
bios_name=hatlab_gateboard-one-bios.bin

ubikrnl_name=hatlab_gateboard-one-kernel.itb
ubiroot_name=hatlab_gateboard-one-squashfs-rootfs.img

ubi_mtd=spi-nand0
ubi_part=nand0-ubi
ubi_volume_kernel=vmlinux.itb
ubi_volume_kernel_size=0
ubi_volume_rootfs=rootfs
ubi_volume_rootfs_size=0
ubi_volume_rootfs_index=1
ubi_volume_data=rootfs_data
ubi_volume_data_size=4000000



ewdt_disable=i2c dev 0; i2c probe; i2c mw 51 0f ff; i2c mw 51 5e 00;



bootargs_template=console=ttyS0,115200

_boot_ubi=ubi part ${ubi_part}; ubi read ${itb_load_addr} ${ubi_volume_kernel}; setenv bootargs ${bootargs_template} ubi.mtd=${ubi_part} ubi.block=0,${ubi_volume_rootfs} root=/dev/ubiblock0_${ubi_volume_rootfs_index}; bootm ${itb_load_addr};

_boot_bootfs=if load ${interface} ${dev}:${bootable} ${itb_load_addr} ${kernel_name}; then setexpr rootpart ${bootable} + 1; part uuid ${interface} ${dev}:${rootpart} rootuuid; setenv bootargs ${bootargs_template} root=PARTUUID=${rootuuid}; if load ${interface} ${dev}:${bootable} ${dtoverride_load_addr} ${dtoverride_name}; then bootm ${itb_load_addr} :${initrd_conf_name} ${dtoverride_load_addr}; fi; bootm ${itb_load_addr}; fi; echo "================================"; echo "Bad bootable media: [${interface}]${dev}:${bootable}"; echo "================================";

_flash_firmware=if load ${interface} ${dev}:1 ${blob_load_addr} ${firmware_name}; then echo "================================"; echo "Found firmware image: [${interface}]${dev}"; echo "================================"; setexpr filesize ${filesize} / 200; setexpr filesize ${filesize} + 1; setenv flashing_cmd ${interface} write ${blob_load_addr} 0 ${filesize}; run ewdt_disable; run flashing_cmd; sleep 1; reset; fi;

_scan_boot_usb_dev=if usb dev ${usb_dev}; then setenv interface usb; setenv dev ${usb_dev}; part list usb ${usb_dev} -bootable bootable; if test "${bootable}" != ""; then run _boot_bootfs; fi; fi; run _flash_firmware;

_scan_boot_usb=usb reset; for i in 0 1 2 3; do setenv usb_dev ${i}; run _scan_boot_usb_dev; done;

_scan_boot_mmc=if mmc dev 0; then setenv interface mmc; setenv dev 0; part list mmc 0 -bootable bootable; if test "${bootable}" != ""; then run _boot_bootfs; fi; fi; run _flash_firmware;

scan_boot=run _scan_boot_mmc; run _scan_boot_usb; run _boot_ubi; echo "================================"; echo "No bootable media."; echo "================================";

hellomessage=echo ""; echo "================================"; echo "DAS-Security HATLab u-boot BIOS"; echo "Version: ${gateboard_bios_version}"; echo "================================"; echo "";

bootcmd=run hellomessage; run scan_boot;



_update_bios=if load ${interface} 0:1 ${blob_load_addr} ${bios_name}; then sf probe; sf erase 0 ${bios_flash_size}; sf write ${blob_load_addr} 0 ${filesize}; sleep 1; reset; fi;
_update_bios_usb=usb reset; setenv interface usb; run _update_bios;
_update_bios_mmc=mmc rescan; setenv interface mmc; run _update_bios; 
update_bios=run ewdt_disable; run _update_bios_usb; run _update_bios_mmc;



_format_ubi=if size ${interface} 0:1 ${ubikrnl_name}; then setenv ubi_volume_kernel_size ${filesize}; if size ${interface} 0:1 ${ubiroot_name}; then setenv ubi_volume_rootfs_size ${filesize}; ubi detach; mtd erase ${ubi_mtd}; ubi part ${ubi_part}; ubi create ${ubi_volume_kernel} ${ubi_volume_kernel_size} s; ubi create ${ubi_volume_rootfs} ${ubi_volume_rootfs_size}; ubi create ${ubi_volume_data} ${ubi_volume_data_size}; fi; fi;
_flash_ubi_part=if load ${interface} 0:1 ${blob_load_addr} ${ubikrnl_name}; then ubi write ${blob_load_addr} ${ubi_volume_kernel} ${filesize}; fi; if load ${interface} 0:1 ${blob_load_addr} ${ubiroot_name}; then ubi write ${blob_load_addr} ${ubi_volume_rootfs} ${filesize}; fi;
_flash_ubi=run ewdt_disable; run _format_ubi; run _flash_ubi_part;
flash_ubi_usb=usb reset; setenv interface usb; run _flash_ubi; reset;
flash_ubi_mmc=mmc rescan; setenv interface mmc; run _flash_ubi reset;
